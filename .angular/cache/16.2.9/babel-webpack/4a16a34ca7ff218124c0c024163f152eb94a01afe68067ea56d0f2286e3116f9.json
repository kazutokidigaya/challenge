{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'https://api.github.com';\n  }\n  // Method to fetch a GitHub user's profile information\n  getUser(username) {\n    return this.httpClient.get(`${this.baseUrl}/users/${username}`);\n  }\n  getReposByUrl(url) {\n    return this.httpClient.get(url, {\n      observe: 'response'\n    }).pipe(map(response => {\n      return {\n        body: response.body,\n        links: this.parseLinkHeader(response.headers.get('link')) // Ensure this is correctly fetching and parsing link headers\n      };\n    }));\n  }\n\n  getRepos(githubUsername, page = 1, perPage = 10) {\n    return this.httpClient.get(`${this.baseUrl}/users/${githubUsername}/repos?page=${page}&per_page=${perPage}`, {\n      observe: 'response'\n    }).pipe(map(response => {\n      return {\n        body: response.body,\n        links: this.parseLinkHeader(response.headers.get('link')) // parse the Link header\n      };\n    }));\n  }\n\n  parseLinkHeader(header) {\n    if (!header || header.length === 0) {\n      return;\n    }\n    let parts = header.split(',');\n    let links = {};\n    parts.forEach(p => {\n      let section = p.split(';');\n      let url = section[0].replace(/<(.*)>/, '$1').trim();\n      let name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n      links[name] = url;\n    });\n    return links;\n  }\n  parsePageFromUrl(url) {\n    const match = url.match(/page=(\\d+)/);\n    return match ? Number(match[1]) : 1; // Return page number or default to 1\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","ApiService","constructor","httpClient","baseUrl","getUser","username","get","getReposByUrl","url","observe","pipe","response","body","links","parseLinkHeader","headers","getRepos","githubUsername","page","perPage","header","length","parts","split","forEach","p","section","replace","trim","name","parsePageFromUrl","match","Number","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/main/Desktop/projects/challenge/src/app/services/api.service.ts"],"sourcesContent":["import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  private baseUrl = 'https://api.github.com';\n\n  constructor(private httpClient: HttpClient) {}\n\n  // Method to fetch a GitHub user's profile information\n  getUser(username: string): Observable<any> {\n    return this.httpClient.get(`${this.baseUrl}/users/${username}`);\n  }\n  getReposByUrl(url: string): Observable<any> {\n    return this.httpClient.get(url, { observe: 'response' }).pipe(\n      map((response: HttpResponse<any>) => {\n        return {\n          body: response.body,\n          links: this.parseLinkHeader(response.headers.get('link')), // Ensure this is correctly fetching and parsing link headers\n        };\n      })\n    );\n  }\n\n  getRepos(\n    githubUsername: string,\n    page: number = 1,\n    perPage: number = 10\n  ): Observable<any> {\n    return this.httpClient\n      .get(\n        `${this.baseUrl}/users/${githubUsername}/repos?page=${page}&per_page=${perPage}`,\n        { observe: 'response' }\n      )\n      .pipe(\n        map((response) => {\n          return {\n            body: response.body, // the array of repositories\n            links: this.parseLinkHeader(response.headers.get('link')), // parse the Link header\n          };\n        })\n      );\n  }\n\n  private parseLinkHeader(\n    header: string | null\n  ): { [key: string]: string } | undefined {\n    if (!header || header.length === 0) {\n      return;\n    }\n\n    let parts = header.split(',');\n    let links: { [key: string]: string } = {};\n    parts.forEach((p) => {\n      let section = p.split(';');\n      let url = section[0].replace(/<(.*)>/, '$1').trim();\n      let name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n      links[name] = url;\n    });\n    return links;\n  }\n\n  parsePageFromUrl(url: string): number {\n    const match = url.match(/page=(\\d+)/);\n    return match ? Number(match[1]) : 1; // Return page number or default to 1\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAG,wBAAwB;EAEG;EAE7C;EACAC,OAAOA,CAACC,QAAgB;IACtB,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,UAAUE,QAAQ,EAAE,CAAC;EACjE;EACAE,aAAaA,CAACC,GAAW;IACvB,OAAO,IAAI,CAACN,UAAU,CAACI,GAAG,CAACE,GAAG,EAAE;MAAEC,OAAO,EAAE;IAAU,CAAE,CAAC,CAACC,IAAI,CAC3DX,GAAG,CAAEY,QAA2B,IAAI;MAClC,OAAO;QACLC,IAAI,EAAED,QAAQ,CAACC,IAAI;QACnBC,KAAK,EAAE,IAAI,CAACC,eAAe,CAACH,QAAQ,CAACI,OAAO,CAACT,GAAG,CAAC,MAAM,CAAC,CAAC,CAAE;OAC5D;IACH,CAAC,CAAC,CACH;EACH;;EAEAU,QAAQA,CACNC,cAAsB,EACtBC,IAAA,GAAe,CAAC,EAChBC,OAAA,GAAkB,EAAE;IAEpB,OAAO,IAAI,CAACjB,UAAU,CACnBI,GAAG,CACF,GAAG,IAAI,CAACH,OAAO,UAAUc,cAAc,eAAeC,IAAI,aAAaC,OAAO,EAAE,EAChF;MAAEV,OAAO,EAAE;IAAU,CAAE,CACxB,CACAC,IAAI,CACHX,GAAG,CAAEY,QAAQ,IAAI;MACf,OAAO;QACLC,IAAI,EAAED,QAAQ,CAACC,IAAI;QACnBC,KAAK,EAAE,IAAI,CAACC,eAAe,CAACH,QAAQ,CAACI,OAAO,CAACT,GAAG,CAAC,MAAM,CAAC,CAAC,CAAE;OAC5D;IACH,CAAC,CAAC,CACH;EACL;;EAEQQ,eAAeA,CACrBM,MAAqB;IAErB,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAClC;;IAGF,IAAIC,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;IAC7B,IAAIV,KAAK,GAA8B,EAAE;IACzCS,KAAK,CAACE,OAAO,CAAEC,CAAC,IAAI;MAClB,IAAIC,OAAO,GAAGD,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC;MAC1B,IAAIf,GAAG,GAAGkB,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAACC,IAAI,EAAE;MACnD,IAAIC,IAAI,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAACC,IAAI,EAAE;MACxDf,KAAK,CAACgB,IAAI,CAAC,GAAGrB,GAAG;IACnB,CAAC,CAAC;IACF,OAAOK,KAAK;EACd;EAEAiB,gBAAgBA,CAACtB,GAAW;IAC1B,MAAMuB,KAAK,GAAGvB,GAAG,CAACuB,KAAK,CAAC,YAAY,CAAC;IACrC,OAAOA,KAAK,GAAGC,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACvC;EAAC,QAAAE,CAAA,G;qBA7DUjC,UAAU,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVtC,UAAU;IAAAuC,OAAA,EAAVvC,UAAU,CAAAwC,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}